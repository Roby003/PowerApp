// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using DA.Entities;
using Microsoft.EntityFrameworkCore;

namespace DA.Context;

public partial class PowerAppContext : DbContext
{
    public PowerAppContext(DbContextOptions<PowerAppContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Comment> Comments { get; set; }

    public virtual DbSet<Exercise> Exercises { get; set; }

    public virtual DbSet<Food> Foods { get; set; }

    public virtual DbSet<Image> Images { get; set; }

    public virtual DbSet<Like> Likes { get; set; }

    public virtual DbSet<Log> Logs { get; set; }

    public virtual DbSet<Meal> Meals { get; set; }

    public virtual DbSet<MealFood> MealFoods { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<RoleApplication> RoleApplications { get; set; }

    public virtual DbSet<Set> Sets { get; set; }

    public virtual DbSet<Template> Templates { get; set; }

    public virtual DbSet<TemplateExercise> TemplateExercises { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<VwExercise> VwExercises { get; set; }

    public virtual DbSet<VwWorkoutsThisWeek> VwWorkoutsThisWeeks { get; set; }

    public virtual DbSet<Workout> Workouts { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.CategoryId).HasName("PK__CATEGORY__19093A0B296C171F");

            entity.ToTable("CATEGORY");

            entity.Property(e => e.Name).HasMaxLength(255);

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .HasConstraintName("FK_CATEGORY_CATEGORY");
        });

        modelBuilder.Entity<Comment>(entity =>
        {
            entity.HasKey(e => e.CommentId).HasName("PK__COMMENT__C3B4DFCA5D3F47DC");

            entity.ToTable("COMMENT");

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

            entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.CommentLastModifiedByNavigations)
                .HasForeignKey(d => d.LastModifiedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMMENT_USER2");

            entity.HasOne(d => d.User).WithMany(p => p.CommentUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMMENT_USER");

            entity.HasOne(d => d.Workout).WithMany(p => p.Comments)
                .HasForeignKey(d => d.WorkoutId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMMENT_WORKOUT");
        });

        modelBuilder.Entity<Exercise>(entity =>
        {
            entity.HasKey(e => e.ExerciseId).HasName("PK__EXERCISE__A074AD2FBC313079");

            entity.ToTable("EXERCISE");

            entity.Property(e => e.Name).HasMaxLength(255);

            entity.HasOne(d => d.Image).WithMany(p => p.Exercises)
                .HasForeignKey(d => d.ImageId)
                .HasConstraintName("FK_EXERCISE_IMAGE");

            entity.HasMany(d => d.Categories).WithMany(p => p.Exercises)
                .UsingEntity<Dictionary<string, object>>(
                    "ExerciseCategory",
                    r => r.HasOne<Category>().WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_EXERCISE_CAT_CATEGORY"),
                    l => l.HasOne<Exercise>().WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_EXERCISE_CAT_EXERCISE"),
                    j =>
                    {
                        j.HasKey("ExerciseId", "CategoryId").HasName("PK_Exercise_Category");
                        j.ToTable("EXERCISE_CATEGORY");
                    });
        });

        modelBuilder.Entity<Food>(entity =>
        {
            entity.HasKey(e => e.FoodId).HasName("PK__FOOD__856DB3EB19D8D0D5");

            entity.ToTable("FOOD");

            entity.Property(e => e.Name).HasMaxLength(250);
        });

        modelBuilder.Entity<Image>(entity =>
        {
            entity.HasKey(e => e.ImageId).HasName("PK__IMAGE__7516F70C98667092");

            entity.ToTable("IMAGE");

            entity.Property(e => e.IsDefaultForExercise).HasColumnName("isDefaultForExercise");
            entity.Property(e => e.IsDefaultForUser).HasColumnName("isDefaultForUser");
        });

        modelBuilder.Entity<Like>(entity =>
        {
            entity.HasKey(e => e.LikeId).HasName("PK__LIKE__A2922C141B584650");

            entity.ToTable("LIKE");

            entity.HasOne(d => d.User).WithMany(p => p.Likes)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LIKE_USER");

            entity.HasOne(d => d.Workout).WithMany(p => p.Likes)
                .HasForeignKey(d => d.WorkoutId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LIKE_WORKOUT");
        });

        modelBuilder.Entity<Log>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__LOGS__3214EC072A626C5F");

            entity.ToTable("LOGS");

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.ErrorMessage).HasMaxLength(1000);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.Logs)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK_LOGS_USER");
        });

        modelBuilder.Entity<Meal>(entity =>
        {
            entity.HasKey(e => e.MealId).HasName("PK__MEAL__ACF6A63D618F6E13");

            entity.ToTable("MEAL");

            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

            entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.MealLastModifiedByNavigations)
                .HasForeignKey(d => d.LastModifiedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MEAL_USER2");

            entity.HasOne(d => d.User).WithMany(p => p.MealUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MEAL_USER");
        });

        modelBuilder.Entity<MealFood>(entity =>
        {
            entity.HasKey(e => new { e.MealId, e.FoodId }).HasName("PK__MEAL_FOO__04A07D03A16A9E4B");

            entity.ToTable("MEAL_FOOD");

            entity.HasOne(d => d.Food).WithMany(p => p.MealFoods)
                .HasForeignKey(d => d.FoodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MEALFOOD_FOOD");

            entity.HasOne(d => d.Meal).WithMany(p => p.MealFoods)
                .HasForeignKey(d => d.MealId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MEALFOOD_MEAL");
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.NotificationId).HasName("PK__NOTIFICA__20CF2E12FFF17A17");

            entity.ToTable("NOTIFICATION");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.NotificationCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTIFICATION_USER_INITIATOR");

            entity.HasOne(d => d.User).WithMany(p => p.NotificationUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTIFICATION_USER");

            entity.HasOne(d => d.Workout).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.WorkoutId)
                .HasConstraintName("FK_NOTIFIACTION_WORKOUT");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ROLES__3214EC07F1226FD9");

            entity.ToTable("ROLES");

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<RoleApplication>(entity =>
        {
            entity.HasKey(e => e.RoleApplicationId).HasName("PK__Role_App__115FFDA77B61DDBB");

            entity.ToTable("Role_Application");

            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.IsPending).HasColumnName("isPending");

            entity.HasOne(d => d.AppliedRole).WithMany(p => p.RoleApplications)
                .HasForeignKey(d => d.AppliedRoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ROLEAPP_ROLE");

            entity.HasOne(d => d.ApprovedByNavigation).WithMany(p => p.RoleApplicationApprovedByNavigations)
                .HasForeignKey(d => d.ApprovedBy)
                .HasConstraintName("FK_ROLEAPP_USER2");

            entity.HasOne(d => d.User).WithMany(p => p.RoleApplicationUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ROLEAPP_USER");
        });

        modelBuilder.Entity<Set>(entity =>
        {
            entity.HasKey(e => e.SetId).HasName("PK__SET__7E08471D5DC678D7");

            entity.ToTable("SET");

            entity.Property(e => e.Rpe).HasColumnName("RPE");

            entity.HasOne(d => d.Exercise).WithMany(p => p.Sets)
                .HasForeignKey(d => d.ExerciseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SET_EXERCISE");

            entity.HasOne(d => d.Workout).WithMany(p => p.Sets)
                .HasForeignKey(d => d.WorkoutId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SET_WORKOUT");
        });

        modelBuilder.Entity<Template>(entity =>
        {
            entity.HasKey(e => e.TemplateId).HasName("PK__TEMPLATE__F87ADD27E2B9694C");

            entity.ToTable("TEMPLATE");

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.IsDefault).HasColumnName("isDefault");
            entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Title).HasMaxLength(250);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.TemplateCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TEMPLATE_USER");

            entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.TemplateLastModifiedByNavigations)
                .HasForeignKey(d => d.LastModifiedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TEMPLATE_USER_LASTMODIFIED");
        });

        modelBuilder.Entity<TemplateExercise>(entity =>
        {
            entity.HasKey(e => new { e.TemplateId, e.ExerciseId }).HasName("PK__TEMPLATE__127D97F54E6E70C6");

            entity.ToTable("TEMPLATE_EXERCISE");

            entity.HasOne(d => d.Exercise).WithMany(p => p.TemplateExercises)
                .HasForeignKey(d => d.ExerciseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TEMPLATEEXERCISE_EXERCISE");

            entity.HasOne(d => d.Template).WithMany(p => p.TemplateExercises)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TEMPLATEEXERCISE_TEMPLATE");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__USER__3214EC07FF6CE0F2");

            entity.ToTable("USER");

            entity.HasIndex(e => e.UserName, "UQ__USER__C9F28456ED4AB3C6").IsUnique();

            entity.Property(e => e.Id).HasDefaultValueSql("(newsequentialid())");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(250);
            entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Password).HasMaxLength(250);
            entity.Property(e => e.UserName).HasMaxLength(200);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.InverseCreatedByNavigation)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USER_USER");

            entity.HasOne(d => d.Image).WithMany(p => p.Users)
                .HasForeignKey(d => d.ImageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USER_IMAGE");

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USER_ROLES");

            entity.HasMany(d => d.FollowedUsers).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "FollowedUser",
                    r => r.HasOne<User>().WithMany()
                        .HasForeignKey("FollowedUserId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_FOLLOWEDUSER_USER2"),
                    l => l.HasOne<User>().WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_FOLLOWEDUSER_USER1"),
                    j =>
                    {
                        j.HasKey("UserId", "FollowedUserId");
                        j.ToTable("FollowedUser");
                    });

            entity.HasMany(d => d.Users).WithMany(p => p.FollowedUsers)
                .UsingEntity<Dictionary<string, object>>(
                    "FollowedUser",
                    r => r.HasOne<User>().WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_FOLLOWEDUSER_USER1"),
                    l => l.HasOne<User>().WithMany()
                        .HasForeignKey("FollowedUserId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_FOLLOWEDUSER_USER2"),
                    j =>
                    {
                        j.HasKey("UserId", "FollowedUserId");
                        j.ToTable("FollowedUser");
                    });
        });

        modelBuilder.Entity<VwExercise>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VwExercises");

            entity.Property(e => e.Name).HasMaxLength(255);
        });

        modelBuilder.Entity<VwWorkoutsThisWeek>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VwWorkoutsThisWeek");

            entity.Property(e => e.CommentCount).HasColumnName("commentCount");
            entity.Property(e => e.LikeCount).HasColumnName("likeCount");
            entity.Property(e => e.WorkoutId).HasColumnName("workoutId");
        });

        modelBuilder.Entity<Workout>(entity =>
        {
            entity.HasKey(e => e.WorkoutId).HasName("PK__WORKOUT__E1C42A012FA733A9");

            entity.ToTable("WORKOUT");

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.IsFeatured).HasColumnName("isFeatured");
            entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

            entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.WorkoutLastModifiedByNavigations)
                .HasForeignKey(d => d.LastModifiedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WORKOUT_USER2");

            entity.HasOne(d => d.Template).WithMany(p => p.Workouts)
                .HasForeignKey(d => d.TemplateId)
                .HasConstraintName("FK_Workout_Template");

            entity.HasOne(d => d.User).WithMany(p => p.WorkoutUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WORKOUT_USER");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}